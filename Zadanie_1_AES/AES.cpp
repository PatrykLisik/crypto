#include "AES.h"


AES::AES(int word, int N, int round) : word(word), N(N), round(round) {
    //Ta funkcja, celowo zosta≈Ça pozostawiona pusta.
}

void AES::KeyExpansion(unsigned char* key, unsigned char* keysForAllRounds) {

    unsigned char *rcon = new unsigned char[4];
    unsigned char *W_i_minus_N = new unsigned char[4];
    unsigned char *W_i_minus_1 = new unsigned char[4];

    int i = 0;
    int allBytesInKeysForAllRounds = word * N * (round + 1);

    for (i = 0; i < N * word; i++) {
        keysForAllRounds[i] = key[i];
    }

    i = N * word;

    while (i < allBytesInKeysForAllRounds) {

        W_i_minus_N[0] = keysForAllRounds[i - N * word + 0];
        W_i_minus_N[1] = keysForAllRounds[i - N * word + 1];
        W_i_minus_N[2] = keysForAllRounds[i - N * word + 2];
        W_i_minus_N[3] = keysForAllRounds[i - N * word + 3];

        W_i_minus_1[0] = keysForAllRounds[i - N + 0];
        W_i_minus_1[1] = keysForAllRounds[i - N + 1];
        W_i_minus_1[2] = keysForAllRounds[i - N + 2];
        W_i_minus_1[3] = keysForAllRounds[i - N + 3];

        if (i % (N * word) == 0) {
            if (i >= N and (i % N == 0)) {

                RotWord(W_i_minus_1);
                SubWord(W_i_minus_1);
                RoundConstant(rcon, i / (N * word));
                XORWord(W_i_minus_N, W_i_minus_1);
                XORWord(rcon, W_i_minus_1);

                //Wynik w W_i_minus_1
            } else if (i >= N and N > 6 and (i % N == 4)) {
                SubWord(W_i_minus_N);
                XORWord(W_i_minus_N, W_i_minus_1);
            } else {
                XORWord(W_i_minus_N, W_i_minus_1);
            }
        }
        else
        {
            XORWord(W_i_minus_N, W_i_minus_1);
        }

        keysForAllRounds[i + 0] = W_i_minus_1[0];
        keysForAllRounds[i + 1] = W_i_minus_1[1];
        keysForAllRounds[i + 2] = W_i_minus_1[2];
        keysForAllRounds[i + 3] = W_i_minus_1[3];
        i += 4;
    }

    delete []rcon;
    delete []W_i_minus_1;
    delete []W_i_minus_N;
}

void AES::RotWord(unsigned char* word) {
    unsigned char tempWord = word[0];
    word[0] = word[1];
    word[1] = word[2];
    word[2] = word[3];
    word[3] = tempWord;
}


static const unsigned char SBox[16][16] = {
        0x63, 0x7c, 0x77, 0x7b, 0xf2, 0x6b, 0x6f, 0xc5, 0x30, 0x01, 0x67, 0x2b, 0xfe, 0xd7, 0xab, 0x76,
        0xca, 0x82, 0xc9, 0x7d, 0xfa, 0x59, 0x47, 0xf0, 0xad, 0xd4, 0xa2, 0xaf, 0x9c, 0xa4, 0x72, 0xc0,
        0xb7, 0xfd, 0x93, 0x26, 0x36, 0x3f, 0xf7, 0xcc, 0x34, 0xa5, 0xe5, 0xf1, 0x71, 0xd8, 0x31, 0x15,
        0x04, 0xc7, 0x23, 0xc3, 0x18, 0x96, 0x05, 0x9a, 0x07, 0x12, 0x80, 0xe2, 0xeb, 0x27, 0xb2, 0x75,
        0x09, 0x83, 0x2c, 0x1a, 0x1b, 0x6e, 0x5a, 0xa0, 0x52, 0x3b, 0xd6, 0xb3, 0x29, 0xe3, 0x2f, 0x84,
        0x53, 0xd1, 0x00, 0xed, 0x20, 0xfc, 0xb1, 0x5b, 0x6a, 0xcb, 0xbe, 0x39, 0x4a, 0x4c, 0x58, 0xcf,
        0xd0, 0xef, 0xaa, 0xfb, 0x43, 0x4d, 0x33, 0x85, 0x45, 0xf9, 0x02, 0x7f, 0x50, 0x3c, 0x9f, 0xa8,
        0x51, 0xa3, 0x40, 0x8f, 0x92, 0x9d, 0x38, 0xf5, 0xbc, 0xb6, 0xda, 0x21, 0x10, 0xff, 0xf3, 0xd2,
        0xcd, 0x0c, 0x13, 0xec, 0x5f, 0x97, 0x44, 0x17, 0xc4, 0xa7, 0x7e, 0x3d, 0x64, 0x5d, 0x19, 0x73,
        0x60, 0x81, 0x4f, 0xdc, 0x22, 0x2a, 0x90, 0x88, 0x46, 0xee, 0xb8, 0x14, 0xde, 0x5e, 0x0b, 0xdb,
        0xe0, 0x32, 0x3a, 0x0a, 0x49, 0x06, 0x24, 0x5c, 0xc2, 0xd3, 0xac, 0x62, 0x91, 0x95, 0xe4, 0x79,
        0xe7, 0xc8, 0x37, 0x6d, 0x8d, 0xd5, 0x4e, 0xa9, 0x6c, 0x56, 0xf4, 0xea, 0x65, 0x7a, 0xae, 0x08,
        0xba, 0x78, 0x25, 0x2e, 0x1c, 0xa6, 0xb4, 0xc6, 0xe8, 0xdd, 0x74, 0x1f, 0x4b, 0xbd, 0x8b, 0x8a,
        0x70, 0x3e, 0xb5, 0x66, 0x48, 0x03, 0xf6, 0x0e, 0x61, 0x35, 0x57, 0xb9, 0x86, 0xc1, 0x1d, 0x9e,
        0xe1, 0xf8, 0x98, 0x11, 0x69, 0xd9, 0x8e, 0x94, 0x9b, 0x1e, 0x87, 0xe9, 0xce, 0x55, 0x28, 0xdf,
        0x8c, 0xa1, 0x89, 0x0d, 0xbf, 0xe6, 0x42, 0x68, 0x41, 0x99, 0x2d, 0x0f, 0xb0, 0x54, 0xbb, 0x16
};

static const unsigned char InvSBox[16][16] = {
        0x52, 0x09, 0x6a, 0xd5, 0x30, 0x36, 0xa5, 0x38, 0xbf, 0x40, 0xa3, 0x9e, 0x81, 0xf3, 0xd7, 0xfb,
        0x7c, 0xe3, 0x39, 0x82, 0x9b, 0x2f, 0xff, 0x87, 0x34, 0x8e, 0x43, 0x44, 0xc4, 0xde, 0xe9, 0xcb,
        0x54, 0x7b, 0x94, 0x32, 0xa6, 0xc2, 0x23, 0x3d, 0xee, 0x4c, 0x95, 0x0b, 0x42, 0xfa, 0xc3, 0x4e,
        0x08, 0x2e, 0xa1, 0x66, 0x28, 0xd9, 0x24, 0xb2, 0x76, 0x5b, 0xa2, 0x49, 0x6d, 0x8b, 0xd1, 0x25,
        0x72, 0xf8, 0xf6, 0x64, 0x86, 0x68, 0x98, 0x16, 0xd4, 0xa4, 0x5c, 0xcc, 0x5d, 0x65, 0xb6, 0x92,
        0x6c, 0x70, 0x48, 0x50, 0xfd, 0xed, 0xb9, 0xda, 0x5e, 0x15, 0x46, 0x57, 0xa7, 0x8d, 0x9d, 0x84,
        0x90, 0xd8, 0xab, 0x00, 0x8c, 0xbc, 0xd3, 0x0a, 0xf7, 0xe4, 0x58, 0x05, 0xb8, 0xb3, 0x45, 0x06,
        0xd0, 0x2c, 0x1e, 0x8f, 0xca, 0x3f, 0x0f, 0x02, 0xc1, 0xaf, 0xbd, 0x03, 0x01, 0x13, 0x8a, 0x6b,
        0x3a, 0x91, 0x11, 0x41, 0x4f, 0x67, 0xdc, 0xea, 0x97, 0xf2, 0xcf, 0xce, 0xf0, 0xb4, 0xe6, 0x73,
        0x96, 0xac, 0x74, 0x22, 0xe7, 0xad, 0x35, 0x85, 0xe2, 0xf9, 0x37, 0xe8, 0x1c, 0x75, 0xdf, 0x6e,
        0x47, 0xf1, 0x1a, 0x71, 0x1d, 0x29, 0xc5, 0x89, 0x6f, 0xb7, 0x62, 0x0e, 0xaa, 0x18, 0xbe, 0x1b,
        0xfc, 0x56, 0x3e, 0x4b, 0xc6, 0xd2, 0x79, 0x20, 0x9a, 0xdb, 0xc0, 0xfe, 0x78, 0xcd, 0x5a, 0xf4,
        0x1f, 0xdd, 0xa8, 0x33, 0x88, 0x07, 0xc7, 0x31, 0xb1, 0x12, 0x10, 0x59, 0x27, 0x80, 0xec, 0x5f,
        0x60, 0x51, 0x7f, 0xa9, 0x19, 0xb5, 0x4a, 0x0d, 0x2d, 0xe5, 0x7a, 0x9f, 0x93, 0xc9, 0x9c, 0xef,
        0xa0, 0xe0, 0x3b, 0x4d, 0xae, 0x2a, 0xf5, 0xb0, 0xc8, 0xeb, 0xbb, 0x3c, 0x83, 0x53, 0x99, 0x61,
        0x17, 0x2b, 0x04, 0x7e, 0xba, 0x77, 0xd6, 0x26, 0xe1, 0x69, 0x14, 0x63, 0x55, 0x21, 0x0c, 0x7d
};


void AES::SubWord(unsigned char *word) {
    int i;
    for (i = 0; i < 4; i++)
    {
        word[i] = SBox[word[i] / 16][word[i] % 16];
    }
}

void AES::RoundConstant(unsigned char *rcon, int currentRound) {
    unsigned char rc = 0x01;

    for (int k = 1; k <= currentRound; k++) {
        if (k == 1) {
            rc = 0x01;
        }
        else if (k > 1 and rc < 0x80) {
            rc *= 2;
        }
        else if (k > 1 and rc >= 0x80) {
            rc = (unsigned char)((2 * rc) ^ 0x11B);
        }
        else {
            exit(-5);
        }
    }

    rcon[0] = rc;
    rcon[1] = 0x00;
    rcon[2] = 0x00;
    rcon[3] = 0x00;
}

void AES::XORWord(unsigned char *xoredArray, unsigned char *destination) {

    for (int i = 0; i < 4; i++) {
        destination[i] ^= xoredArray[i];
    }
}


void AES::SubBytes(unsigned char **state) {

    unsigned char valOnPostion;

    for (int i = 0; i < N; i++) {
        for (int j = 0; j < word; j++) {
            valOnPostion = state[i][j];
            state[i][j] = SBox[valOnPostion / 16][valOnPostion % 16];
        }
    }
}

void AES::InvSubBytes(unsigned char **state) {

    unsigned char valOnPostion;

    for (int i = 0; i < N; i++) {
        for (int j = 0; j < word; j++) {
            valOnPostion = state[i][j];
            state[i][j] = InvSBox[valOnPostion / 16][valOnPostion % 16];
        }
    }
}

void AES::ShiftRows(unsigned char **state) {

    //ShiftRow(state, 0, 0);
    ShiftRow(state, 1, 1);
    ShiftRow(state, 2, 2);
    ShiftRow(state, 3, 3);

}

void AES::ShiftRow(unsigned char **state, int row, int fieldsNumber) {

    unsigned char temp;
    for (int i = 0; i < fieldsNumber; i++) {
        temp = state[row][0];
        for (int j = 0; j < (word - 1); j++) {
            state[row][j] = state[row][j + 1];
        }
        state[row][word - 1] = temp;
    }

}

void AES::InvShiftRows(unsigned char **state) {

    //InvShiftRow(state, 0, word - 0);
    ShiftRow(state, 1, word - 1);
    ShiftRow(state, 2, word - 2);
    ShiftRow(state, 3, word - 3);

}

static const unsigned char GaloisField[4][4] = {
        0x02, 0x03, 0x01, 0x01,
        0x01, 0x02, 0x03, 0x01,
        0x01, 0x01, 0x02, 0x03,
        0x03, 0x01, 0x01, 0x02
};

static const unsigned char InvGaloisField[4][4] = {
        0x0e, 0x0b, 0x0d, 0x09,
        0x09, 0x0e, 0x0b, 0x0d,
        0x0d, 0x09, 0x0e, 0x0b,
        0x0b, 0x0d, 0x09, 0x0e
};

static const unsigned char E_Table[] = {
        0x01, 0x03, 0x05, 0x0f, 0x11, 0x33, 0x55, 0xff, 0x1a, 0x2e, 0x72, 0x96, 0xa1, 0xf8, 0x13, 0x35,
        0x5f, 0xe1, 0x38, 0x48, 0xd8, 0x73, 0x95, 0xa4, 0xf7, 0x02, 0x06, 0x0a, 0x1e, 0x22, 0x66, 0xaa,
        0xe5, 0x34, 0x5c, 0xe4, 0x37, 0x59, 0xeb, 0x26, 0x6a, 0xbe, 0xd9, 0x70, 0x90, 0xab, 0xe6, 0x31,
        0x53, 0xf5, 0x04, 0x0c, 0x14, 0x3c, 0x44, 0xcc, 0x4f, 0xd1, 0x68, 0xb8, 0xd3, 0x6e, 0xb2, 0xcd,
        0x4c, 0xd4, 0x67, 0xa9, 0xe0, 0x3b, 0x4d, 0xd7, 0x62, 0xa6, 0xf1, 0x08, 0x18, 0x28, 0x78, 0x88,
        0x83, 0x9e, 0xb9, 0xd0, 0x6b, 0xbd, 0xdc, 0x7f, 0x81, 0x98, 0xb3, 0xce, 0x49, 0xdb, 0x76, 0x9a,
        0xb5, 0xc4, 0x57, 0xf9, 0x10, 0x30, 0x50, 0xf0, 0x0b, 0x1d, 0x27, 0x69, 0xbb, 0xd6, 0x61, 0xa3,
        0xfe, 0x19, 0x2b, 0x7d, 0x87, 0x92, 0xad, 0xec, 0x2f, 0x71, 0x93, 0xae, 0xe9, 0x20, 0x60, 0xa0,
        0xfb, 0x16, 0x3a, 0x4e, 0xd2, 0x6d, 0xb7, 0xc2, 0x5d, 0xe7, 0x32, 0x56, 0xfa, 0x15, 0x3f, 0x41,
        0xc3, 0x5e, 0xe2, 0x3d, 0x47, 0xc9, 0x40, 0xc0, 0x5b, 0xed, 0x2c, 0x74, 0x9c, 0xbf, 0xda, 0x75,
        0x9f, 0xba, 0xd5, 0x64, 0xac, 0xef, 0x2a, 0x7e, 0x82, 0x9d, 0xbc, 0xdf, 0x7a, 0x8e, 0x89, 0x80,
        0x9b, 0xb6, 0xc1, 0x58, 0xe8, 0x23, 0x65, 0xaf, 0xea, 0x25, 0x6f, 0xb1, 0xc8, 0x43, 0xc5, 0x54,
        0xfc, 0x1f, 0x21, 0x63, 0xa5, 0xf4, 0x07, 0x09, 0x1b, 0x2d, 0x77, 0x99, 0xb0, 0xcb, 0x46, 0xca,
        0x45, 0xcf, 0x4a, 0xde, 0x79, 0x8b, 0x86, 0x91, 0xa8, 0xe3, 0x3e, 0x42, 0xc6, 0x51, 0xf3, 0x0e,
        0x12, 0x36, 0x5a, 0xee, 0x29, 0x7b, 0x8d, 0x8c, 0x8f, 0x8a, 0x85, 0x94, 0xa7, 0xf2, 0x0d, 0x17,
        0x39, 0x4b, 0xdd, 0x7c, 0x84, 0x97, 0xa2, 0xfd, 0x1c, 0x24, 0x6c, 0xb4, 0xc7, 0x52, 0xf6, 0x01};

static const unsigned char L_Table[] = {
        0x00, 0x00, 0x19, 0x01, 0x32, 0x02, 0x1a, 0xc6, 0x4b, 0xc7, 0x1b, 0x68, 0x33, 0xee, 0xdf, 0x03,
        0x64, 0x04, 0xe0, 0x0e, 0x34, 0x8d, 0x81, 0xef, 0x4c, 0x71, 0x08, 0xc8, 0xf8, 0x69, 0x1c, 0xc1,
        0x7d, 0xc2, 0x1d, 0xb5, 0xf9, 0xb9, 0x27, 0x6a, 0x4d, 0xe4, 0xa6, 0x72, 0x9a, 0xc9, 0x09, 0x78,
        0x65, 0x2f, 0x8a, 0x05, 0x21, 0x0f, 0xe1, 0x24, 0x12, 0xf0, 0x82, 0x45, 0x35, 0x93, 0xda, 0x8e,
        0x96, 0x8f, 0xdb, 0xbd, 0x36, 0xd0, 0xce, 0x94, 0x13, 0x5c, 0xd2, 0xf1, 0x40, 0x46, 0x83, 0x38,
        0x66, 0xdd, 0xfd, 0x30, 0xbf, 0x06, 0x8b, 0x62, 0xb3, 0x25, 0xe2, 0x98, 0x22, 0x88, 0x91, 0x10,
        0x7e, 0x6e, 0x48, 0xc3, 0xa3, 0xb6, 0x1e, 0x42, 0x3a, 0x6b, 0x28, 0x54, 0xfa, 0x85, 0x3d, 0xba,
        0x2b, 0x79, 0x0a, 0x15, 0x9b, 0x9f, 0x5e, 0xca, 0x4e, 0xd4, 0xac, 0xe5, 0xf3, 0x73, 0xa7, 0x57,
        0xaf, 0x58, 0xa8, 0x50, 0xf4, 0xea, 0xd6, 0x74, 0x4f, 0xae, 0xe9, 0xd5, 0xe7, 0xe6, 0xad, 0xe8,
        0x2c, 0xd7, 0x75, 0x7a, 0xeb, 0x16, 0x0b, 0xf5, 0x59, 0xcb, 0x5f, 0xb0, 0x9c, 0xa9, 0x51, 0xa0,
        0x7f, 0x0c, 0xf6, 0x6f, 0x17, 0xc4, 0x49, 0xec, 0xd8, 0x43, 0x1f, 0x2d, 0xa4, 0x76, 0x7b, 0xb7,
        0xcc, 0xbb, 0x3e, 0x5a, 0xfb, 0x60, 0xb1, 0x86, 0x3b, 0x52, 0xa1, 0x6c, 0xaa, 0x55, 0x29, 0x9d,
        0x97, 0xb2, 0x87, 0x90, 0x61, 0xbe, 0xdc, 0xfc, 0xbc, 0x95, 0xcf, 0xcd, 0x37, 0x3f, 0x5b, 0xd1,
        0x53, 0x39, 0x84, 0x3c, 0x41, 0xa2, 0x6d, 0x47, 0x14, 0x2a, 0x9e, 0x5d, 0x56, 0xf2, 0xd3, 0xab,
        0x44, 0x11, 0x92, 0xd9, 0x23, 0x20, 0x2e, 0x89, 0xb4, 0x7c, 0xb8, 0x26, 0x77, 0x99, 0xe3, 0xa5,
        0x67, 0x4a, 0xed, 0xde, 0xc5, 0x31, 0xfe, 0x18, 0x0d, 0x63, 0x8c, 0x80, 0xc0, 0xf7, 0x70, 0x07 };

unsigned char AES::E(unsigned char a, unsigned char b) {

    unsigned char val;
    unsigned short sum;

    if (a == 1) {
        return b;
    } else if (b == 1) {
        return a;
    }

    if (a == 0 or b == 0) {
        return 0;
    }

    sum = L(a);
    sum += L(b);
    if (sum > 0xff) {
        sum -= 0xff;
    }
    val = E_Table[sum];

    return (val);
}

unsigned char AES::L(unsigned char val) {

    return (L_Table[val]);
}

void AES::MixColumns (unsigned char **state) {

    unsigned char columnCopy[word], columnResult[4];

    for (int i = 0; i < word; i++) {
        for (int c = 0; c < word; c++) {
            columnCopy[c] = state[c][i];
        }

        for (int j = 0; j < 4; j++) {
            columnResult[j] = E(columnCopy[0],GaloisField[j][0]) xor
                              E(columnCopy[1],GaloisField[j][1]) xor
                              E(columnCopy[2],GaloisField[j][2]) xor
                              E(columnCopy[3],GaloisField[j][3]);
        }
        for (int d = 0; d < word; d++) {
            state[d][i] = columnResult[d];
        }
    }
}

void AES::InvMixColumns(unsigned char **state) {

    unsigned char columnCopy[word], columnResult[4];

    for (int i = 0; i < word; i++) {
        for (int c = 0; c < word; c++) {
            columnCopy[c] = state[c][i];
        }

        for (int j = 0; j < 4; j++) {
            columnResult[j] = E(columnCopy[0],InvGaloisField[j][0]) xor
                              E(columnCopy[1],InvGaloisField[j][1]) xor
                              E(columnCopy[2],InvGaloisField[j][2]) xor
                              E(columnCopy[3],InvGaloisField[j][3]);
        }
        for (int d = 0; d < word; d++) {
            state[d][i] = columnResult[d];
        }
    }
}

void AES::AddRoundKey(unsigned char **state, unsigned char* roundKey) {

    for (int i = 0; i < N; i++) {
        for (int j = 0; j < word; j++) {
            state[i][j] ^= roundKey[i + 4 * j];
        }
    }
}

void AES::setCurrentRoundKey(unsigned char *currentRoundKey, unsigned char *keysForAllRounds, int currentRound) {

    for (int i = 0; i < N * word; i++) {
        currentRoundKey[i] = keysForAllRounds[(currentRound * word * N) + i];
    }
}

void AES::InvAddRoundKey(unsigned char **state, unsigned char* roundKey) {

    AddRoundKey(state, roundKey);
}

void AES::printState(unsigned char **state) {

    for (int i = 0; i < word; i++) {
        for (int j = 0; j < N; j++) {
            printf("0x%02x ", state[i][j]);
        }
        printf("\n");
    }
    printf("\n");
}

void AES::RotateState(unsigned char **state) {

    unsigned char temp[word][N];
    for (int i = 0; i < word; i++) {
        for (int j = 0; j < N; j++) {
            temp[i][j] = state[j][i];
        }
    }

    for (int i = 0; i < word; i++) {
        for (int j = 0; j < N; j++) {
            state[j][i] = temp[j][i];
        }
    }
}

void AES::EncryptBlock(std::vector<unsigned char> plainText, unsigned char *key, FILE* ouputFile) {



    unsigned char *keysForAllRounds = new unsigned char[N * word * (round + 1)];
    KeyExpansion(key, keysForAllRounds);

    unsigned char **state = new unsigned char *[N];

    for (int i = 0; i < N; i++) {
        state[i] = new unsigned char [word];
    }

    printf("EncryptBlock::Input\n");
    for(int j = 0; j < N; j++) {
        for (int k = 0; k < word; k++) {
            state[k][j] = plainText[k + j * N];
            printf("0x%02x ", state[k][j]);
        }
        printf("\n");
    }
    printf("\n");

    int currentRound = 0;
    unsigned char currentRoundKey[N * word];

    setCurrentRoundKey(currentRoundKey, keysForAllRounds, currentRound);
    AddRoundKey(state, currentRoundKey);
    //printf("AddRoundKey, round %d: \n", currentRound);
    //printState(state);

    currentRound++;

    while (currentRound <= (round - 1)) {
        SubBytes(state);
        //printf("SubBytes, round %d: \n", currentRound);
        //printState(state);

        ShiftRows(state);
        //printf("ShiftRows, round %d: \n", currentRound);
        //printState(state);

        MixColumns(state);
        //printf("MixColumns, round %d: \n", currentRound);
        //printState(state);

        setCurrentRoundKey(currentRoundKey, keysForAllRounds, currentRound);
        AddRoundKey(state, currentRoundKey);
        //printf("AddRoundKey, round %d: \n", currentRound);
        //printState(state);


        currentRound++;
    }

    //printf("SubBytes, round %d: \n", currentRound);
    SubBytes(state);
    //printState(state);

    //printf("ShiftRows, round %d: \n", currentRound);
    ShiftRows(state);
    //printState(state);

    //printf("AddRoundKey, round %d: \n", currentRound);
    setCurrentRoundKey(currentRoundKey, keysForAllRounds, currentRound);
    AddRoundKey(state, currentRoundKey);
    //printState(state);

    printf("\nEncryptBlock::Output: \n");
    printState(state);

    for(int i = 0; i < word; i++) {
        std::fwrite(state[i], sizeof(unsigned char), N, ouputFile);
    }

    for (int i = 0; i < N; i++) {
        delete[] state[i];
    }
    delete[] state;
    delete[] keysForAllRounds;

}



void AES::DecryptBlock(std::vector<unsigned char> cipherText, unsigned char *key, FILE* ouputFile) {

    unsigned char *keysForAllRounds = new unsigned char[N * word * (round + 1)];
    KeyExpansion(key, keysForAllRounds);

    unsigned char **state = new unsigned char *[N];

    for (int i = 0; i < N; i++) {
        state[i] = new unsigned char [word];
    }

    printf("DecryptBlock::Input\n");
    for(int j = 0; j < N; j++) {
        for (int k = 0; k < word; k++) {
            state[j][k] = cipherText[k + j * N];
        }
    }
    printState(state);

    int currentRound = round;
    unsigned char currentRoundKey[N * word];

    //printf("AddRoundKey, round %d: \n", currentRound);
    setCurrentRoundKey(currentRoundKey, keysForAllRounds, currentRound);
    InvAddRoundKey(state, currentRoundKey);
    //printState(state);

    //printf("ShiftRows, round %d: \n", currentRound);
    InvShiftRows(state);
    //printState(state);

    //printf("SubBytes, round %d: \n", currentRound);
    InvSubBytes(state);
    //printState(state);

    currentRound--;

    while ((currentRound) >= 1) {

        setCurrentRoundKey(currentRoundKey, keysForAllRounds, currentRound);
        InvAddRoundKey(state, currentRoundKey);
        //printf("AddRoundKey, round %d: \n", currentRound);
        //printState(state);

        InvMixColumns(state);
        //printf("MixColumns, round %d: \n", currentRound);
        //printState(state);

        InvShiftRows(state);
        //printf("ShiftRows, round %d: \n", currentRound);
        //printState(state);

        InvSubBytes(state);
        //printf("SubBytes, round %d: \n", currentRound);
        //printState(state);

        currentRound--;
    }

    setCurrentRoundKey(currentRoundKey, keysForAllRounds, currentRound);
    AddRoundKey(state, currentRoundKey);
    //printf("AddRoundKey, round %d: \n", currentRound);
    //printState(state);

    RotateState(state);
    printf("\nDecryptBlock:: Output: \n");
    printState(state);

    for(int i = 0; i < word; i++) {
        std::fwrite(state[i], sizeof(unsigned char), N, ouputFile);
    }


    for (int i = 0; i < N; i++) {
        delete[] state[i];
    }
    delete[] state;
    delete[] keysForAllRounds;
}
